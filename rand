/*
void displayInterface(sf::RenderWindow& window, sf::Font& font, std::string& sport, std::string& event) {
    // Available sports and events
    std::vector<std::string> sports = {"1. Swimming", "2. Cycling", "3. Rowing"};
    std::vector<std::string> events = {"1. 50m Butterfly", "2. 200m Freestyle", "3. Floor Routine"};

    // Text elements
    sf::Text sportPrompt("Which sport would you like to analyze? [Enter name]:", font, 20);
    sportPrompt.setPosition(50, 50);

    sf::Text sportOptions("", font, 18);
    std::string sportList = "";
    for (const auto& s : sports) {
        sportList += s + "\n";
    }
    sportOptions.setString(sportList);
    sportOptions.setPosition(50, 80);

    sf::Text eventPrompt("Which event would you like to analyze? [Enter name]:", font, 20);
    eventPrompt.setPosition(50, 200);

    sf::Text eventOptions("", font, 18);
    std::string eventList = "";
    for (const auto& e : events) {
        eventList += e + "\n";
    }
    eventOptions.setString(eventList);
    eventOptions.setPosition(50, 230);

    // Input text for sport and event
    sf::Text sportInput("", font, 20);
    sportInput.setPosition(500, 50);

    sf::Text eventInput("", font, 20);
    eventInput.setPosition(500, 200);

    // Result section
    sf::Text resultPrompt("", font, 20);
    resultPrompt.setPosition(50, 350);

    sf::Text resultDetails("", font, 20);
    resultDetails.setPosition(50, 400);

    sf::Text bestPerformer("", font, 20);
    bestPerformer.setPosition(50, 500);

    sf::Text restartPrompt("Press W to do this again.", font, 20);
    restartPrompt.setPosition(50, 550);

    std::string currentInput = "";
    bool enteringSport = true;
    bool resultsDisplayed = false;

    while (window.isOpen()) {
        sf::Event eventSFML;
        while (window.pollEvent(eventSFML)) {
            if (eventSFML.type == sf::Event::Closed) {
                window.close();
                return;
            }

            // Handle text input
            if (eventSFML.type == sf::Event::TextEntered) {
                if (eventSFML.text.unicode == '\b' && !currentInput.empty()) {
                    currentInput.pop_back();
                } else if (eventSFML.text.unicode == '\r') {
                    if (enteringSport) {
                        sport = currentInput;
                        enteringSport = false;
                        currentInput = "";
                    } else {
                        event = currentInput;

                        // Display sorting results after entering event
                        int mergeSortTime = rand() % 100 + 50;  // Random merge sort time
                        int quickSortTime = rand() % 100 + 50; // Random quick sort time

                        resultPrompt.setString("Analyzing column-wise data...");
                        resultDetails.setString(
                                "Merge Sort Time: " + std::to_string(mergeSortTime) + "\n" +
                                "Quick Sort Time: " + std::to_string(quickSortTime)
                        );

                        std::string bestPerformerText = "Based on your input, the best performer of this section is [Person Name]";
                        bestPerformer.setString(bestPerformerText);

                        resultsDisplayed = true;
                        currentInput = "";
                    }
                } else if (eventSFML.text.unicode < 128) {
                    currentInput += static_cast<char>(eventSFML.text.unicode);
                }
            }

            // Handle 'W' key to restart
            if (eventSFML.type == sf::Event::KeyPressed) {
                if (eventSFML.key.code == sf::Keyboard::W) {
                    sport = "";
                    event = "";
                    currentInput = "";
                    enteringSport = true;
                    resultsDisplayed = false;

                    resultPrompt.setString("");
                    resultDetails.setString("");
                    bestPerformer.setString("");
                }
            }
        }

        // Update input display
        if (enteringSport) {
            sportInput.setString(currentInput);
        } else if (!resultsDisplayed) {
            eventInput.setString(currentInput);
        }

        window.clear(sf::Color::Black);

        // Draw elements
        window.draw(sportPrompt);
        window.draw(sportOptions);
        window.draw(sportInput);

        if (!enteringSport || resultsDisplayed) {
            window.draw(eventPrompt);
            window.draw(eventOptions);
            window.draw(eventInput);
        }

        window.draw(resultPrompt);
        window.draw(resultDetails);
        window.draw(bestPerformer);
        window.draw(restartPrompt);

        window.display();
    }
}
 */

 /*
 int main() {
     sf::RenderWindow window(sf::VideoMode(800, 600), "Sport and Event Analysis");
     sf::Font font;

     // Load font
     if (!font.loadFromFile("arial.ttf")) {
         return -1;
     }

     std::string sport;
     std::string event;

     displayInterface(window, font, sport, event);

     return 0;
 }
 */
